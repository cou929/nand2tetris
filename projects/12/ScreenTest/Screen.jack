// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = -32767 - 1;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int x;
        let x = 0;
        while (x < 8192) {  // 512 * 256 / 16
            do Memory.poke(16384 + x, 0);
            let x = x + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, slot, pos, val;
        let addr = 16384 + (y * 32) + (x / 16);
        let slot = Memory.peek(addr);
        let pos = x - ((x / 16) * 16); // x mod 16
        let val = Screen.setBit(slot, pos, color);
        do Memory.poke(addr, val);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, adyMinuxbdx;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;

        if (dx = 0) {
            while (Math.abs(b) < (Math.abs(dy) + 1)) {
                do Screen.drawPixel(x1, y1 + b);
                if (dy > 0) {
                    let b = b + 1;
                } else {
                    let b = b - 1;
                }
            }
            return;
        }

        if (dy = 0) {
            while (Math.abs(a) < (Math.abs(dx) + 1)) {
                do Screen.drawPixel(x1 + a, y1);
                if (dx > 0) {
                    let a = a + 1;
                } else {
                    let a = a - 1;
                }
            }
            return;
        }

        let adyMinuxbdx = 0;
        while ((Math.abs(a) < (Math.abs(dx) + 1)) & (Math.abs(b) < (Math.abs(dy) + 1))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (adyMinuxbdx < 0) {
                if (dx > 0) {
                    let a = a + 1;
                } else {
                    let a = a - 1;
                }
                let adyMinuxbdx = adyMinuxbdx + Math.abs(dy);
            } else {
                if (dy > 0) {
                    let b = b + 1;
                } else {
                    let b = b - 1;
                }
                let adyMinuxbdx = adyMinuxbdx - Math.abs(dx);
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i;
        let i = x1;
        while (i < (x2 + 1)) {
            do Screen.drawLine(i, y1, i, y2);
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        let dy = -r;
        while (dy < r) {
            do Screen.drawLine(x - Math.sqrt((r * r) - (dy * dy)), y + dy, x + Math.sqrt((r * r) - (dy * dy)), y + dy);
            let dy = dy + 1;
        }
        return;
    }

    function int setBit(int x, int j, boolean val) {
        if (val = true) {
            return x | twoToThe[j];
        } else {
            return x & ~twoToThe[j];
        }
    }
}
