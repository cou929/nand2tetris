function Math.init 0
push constant 15
call Array.new 1
pop static 0
push constant 1
push static 0
push constant 0
add
pop pointer 1
pop that 0
push constant 2
push static 0
push constant 1
add
pop pointer 1
pop that 0
push constant 4
push static 0
push constant 2
add
pop pointer 1
pop that 0
push constant 8
push static 0
push constant 3
add
pop pointer 1
pop that 0
push constant 16
push static 0
push constant 4
add
pop pointer 1
pop that 0
push constant 32
push static 0
push constant 5
add
pop pointer 1
pop that 0
push constant 64
push static 0
push constant 6
add
pop pointer 1
pop that 0
push constant 128
push static 0
push constant 7
add
pop pointer 1
pop that 0
push constant 256
push static 0
push constant 8
add
pop pointer 1
pop that 0
push constant 512
push static 0
push constant 9
add
pop pointer 1
pop that 0
push constant 1024
push static 0
push constant 10
add
pop pointer 1
pop that 0
push constant 2048
push static 0
push constant 11
add
pop pointer 1
pop that 0
push constant 4096
push static 0
push constant 12
add
pop pointer 1
pop that 0
push constant 8192
push static 0
push constant 13
add
pop pointer 1
pop that 0
push constant 16384
push static 0
push constant 14
add
pop pointer 1
pop that 0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
not
if-goto Math.abs.0.IF.ELSE
push argument 0
neg
return
goto Math.abs.0.IF.END
label Math.abs.0.IF.ELSE
label Math.abs.0.IF.END
push argument 0
return
function Math.multiply 5
push argument 0
call Math.abs 1
pop local 3
push argument 1
call Math.abs 1
pop local 4
push constant 0
pop local 0
push local 3
pop local 1
push constant 0
pop local 2
label Math.multiply.0.WHILE.CONT
push local 2
push constant 15
lt
not
if-goto Math.multiply.0.WHILE.END
push local 4
push local 2
call Math.bit 2
not
if-goto Math.multiply.1.IF.ELSE
push local 0
push local 1
add
pop local 0
goto Math.multiply.1.IF.END
label Math.multiply.1.IF.ELSE
label Math.multiply.1.IF.END
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto Math.multiply.0.WHILE.CONT
label Math.multiply.0.WHILE.END
push argument 0
push constant 0
gt
push argument 1
push constant 0
gt
and
not
if-goto Math.multiply.2.IF.ELSE
push local 0
return
goto Math.multiply.2.IF.END
label Math.multiply.2.IF.ELSE
label Math.multiply.2.IF.END
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
and
not
if-goto Math.multiply.3.IF.ELSE
push local 0
return
goto Math.multiply.3.IF.END
label Math.multiply.3.IF.ELSE
label Math.multiply.3.IF.END
push local 0
neg
return
function Math.divide 4
push argument 0
call Math.abs 1
pop local 0
push argument 1
call Math.abs 1
pop local 1
push local 1
push local 0
gt
not
if-goto Math.divide.4.IF.ELSE
push constant 0
return
goto Math.divide.4.IF.END
label Math.divide.4.IF.ELSE
label Math.divide.4.IF.END
push local 0
push constant 2
push local 1
call Math.multiply 2
call Math.divide 2
pop local 2
push local 0
push constant 2
push local 2
call Math.multiply 2
push local 1
call Math.multiply 2
sub
push local 1
lt
not
if-goto Math.divide.5.IF.ELSE
push constant 2
push local 2
call Math.multiply 2
pop local 3
goto Math.divide.5.IF.END
label Math.divide.5.IF.ELSE
push constant 2
push local 2
call Math.multiply 2
push constant 1
add
pop local 3
label Math.divide.5.IF.END
push argument 0
push constant 0
gt
push argument 1
push constant 0
gt
and
not
if-goto Math.divide.6.IF.ELSE
push local 3
return
goto Math.divide.6.IF.END
label Math.divide.6.IF.ELSE
label Math.divide.6.IF.END
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
and
not
if-goto Math.divide.7.IF.ELSE
push local 3
return
goto Math.divide.7.IF.END
label Math.divide.7.IF.ELSE
label Math.divide.7.IF.END
push local 3
neg
return
function Math.sqrt 4
push constant 0
pop local 0
push constant 16
pop local 1
push local 1
push constant 2
call Math.divide 2
push constant 1
sub
pop local 2
label Math.sqrt.1.WHILE.CONT
push local 2
push constant 1
neg
gt
not
if-goto Math.sqrt.1.WHILE.END
push local 0
push static 0
push local 2
add
pop pointer 1
push that 0
add
push local 0
push static 0
push local 2
add
pop pointer 1
push that 0
add
call Math.multiply 2
pop local 3
push local 3
push argument 0
lt
push local 3
push argument 0
eq
or
push local 3
push constant 0
gt
and
not
if-goto Math.sqrt.8.IF.ELSE
push local 0
push static 0
push local 2
add
pop pointer 1
push that 0
add
pop local 0
goto Math.sqrt.8.IF.END
label Math.sqrt.8.IF.ELSE
label Math.sqrt.8.IF.END
push local 2
push constant 1
sub
pop local 2
goto Math.sqrt.1.WHILE.CONT
label Math.sqrt.1.WHILE.END
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
not
if-goto Math.max.9.IF.ELSE
push argument 0
return
goto Math.max.9.IF.END
label Math.max.9.IF.ELSE
label Math.max.9.IF.END
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
not
if-goto Math.min.10.IF.ELSE
push argument 0
return
goto Math.min.10.IF.END
label Math.min.10.IF.ELSE
label Math.min.10.IF.END
push argument 1
return
function Math.bit 2
push constant 14
pop local 0
push argument 0
pop local 1
label Math.bit.2.WHILE.CONT
push local 0
push argument 1
gt
not
if-goto Math.bit.2.WHILE.END
push local 1
push static 0
push local 0
add
pop pointer 1
push that 0
gt
push local 1
push static 0
push local 0
add
pop pointer 1
push that 0
eq
or
not
if-goto Math.bit.11.IF.ELSE
push local 1
push static 0
push local 0
add
pop pointer 1
push that 0
sub
pop local 1
goto Math.bit.11.IF.END
label Math.bit.11.IF.ELSE
label Math.bit.11.IF.END
push local 0
push constant 1
sub
pop local 0
goto Math.bit.2.WHILE.CONT
label Math.bit.2.WHILE.END
push local 1
push static 0
push argument 1
add
pop pointer 1
push that 0
lt
not
if-goto Math.bit.12.IF.ELSE
push constant 0
return
goto Math.bit.12.IF.END
label Math.bit.12.IF.ELSE
label Math.bit.12.IF.END
push constant 1
neg
return