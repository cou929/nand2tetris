// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(15);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        // let twoToThe[15] = 32768;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, j, xx, yy;
        let xx = Math.abs(x);
        let yy = Math.abs(y);
        let sum = 0;
        let shiftedX = xx;
        let j = 0;
        while (j < 15) {
            if (Math.bit(yy, j)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }
        if ((x > 0) & (y > 0)) {
            return sum;
        }
        if ((x < 0) & (y < 0)) {
            return sum;
        }
        return -sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int xx, yy, q, absRes;
        let xx = Math.abs(x);
        let yy = Math.abs(y);
        if (yy > xx) {
            return 0;
        }
        let q = Math.divide(xx, 2 * yy);
        if ((xx - ((2 * q) * yy)) < yy) {
            let absRes = 2 * q;
        } else {
            let absRes = (2 * q) + 1;
        }
        if ((x > 0) & (y > 0)) {
            return absRes;
        }
        if ((x < 0) & (y < 0)) {
            return absRes;
        }
        return -absRes;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, n, j, tmp;
        let y = 0;
        let n = 16;
        let j = (n / 2) - 1;
        while (j > -1) {
            let tmp = (y + twoToThe[j]) * (y + twoToThe[j]); // twoToThe[j] == 2 ^ j
            if (((tmp < x) | (tmp = x)) & (tmp > 0)) {  // (tmp > 0) prevents overflow
                let y = y + twoToThe[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }

    function boolean bit(int x, int j) {
        var int i, rest;
        let i = 14;
        let rest = x;
        while (i > j) {
            if ((rest > twoToThe[i]) | (rest = twoToThe[i])) {
                let rest = rest - twoToThe[i];
            }
            let i = i - 1;
        }
        if (rest < twoToThe[j]) {
            return false;
        }
        return true;
    }
}
