// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array arr;
    field int len;
    field int max;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let arr = Array.new(maxLength);
        }
        let len = 0;
        let max = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (max > 0) {
            do arr.dispose();
        }
        let len = 0;
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let arr[j] = c;
        if (len < j) {
            let len = j;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        do setCharAt(len, c);
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let len = len - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, res;
        var bool neg;
        let neg = false;
        if ((arr[0] = 45)) {
            let neg = true;
        }
        let res = 0;
        let i = 0;
        if (neg) {
            let i = 1;
        }
        while (i < len) {
            if ( (arr[i] < 48) & (57 < arr[i]) ) {
                if (neg) {
                    return -res;
                } else {
                    return res;
                }
            }
            let res = (res * 10) + (arr[i] - 48);
            let i = i + 1;
        }
        if (neg) {
            return -res;
        } else {
            return res;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int v;
        let len = 0;
        if (val < 0) {
            let v = Math.abs(val);
            do appendChar(45);
        } else {
            let v = val;
        }
        do int2str(v);
        return;
    }

    method void int2str(int val) {
        var int lastDigit;
        var char c;
        let lastDigit = val - (Math.divide(val, 10) * 10);
        let c = lastDigit + 48;
        if (val < 10) {
            do appendChar(c);
        } else {
            do int2str(val/10);
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
