// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // decode
    Or(a=instruction[15], b=false, out=commandType, out=isCCommand);
    Not(in=commandType, out=isACommand);
    Or16(a[0..14]=instruction[0..14], a[15]=false, b=false, out=aValue);

    // A register
    Mux16(a=aValue, b=compResult, sel=commandType, out=selectedAValue);
    Or(a=instruction[5], b=false, out=destIsARegister);
    And(a=isCCommand, b=destIsARegister, out=shouldSaveToARegisterAtCCommand);
    Or(a=isACommand, b=shouldSaveToARegisterAtCCommand, out=aLoadFlag);
    ARegister(in=selectedAValue, load=aLoadFlag, out=setAValue, out[0..14]=addressM);

    // D register
    Or(a=instruction[4], b=false, out=destIsDRegister);
    And(a=isCCommand, b=destIsDRegister, out=shouldSaveToDRegisterAtCCommand);
    DRegister(in=compResult, load=shouldSaveToDRegisterAtCCommand, out=setDValue);

    // select A or M for ALU input
    Mux16(a=setAValue, b=inM, sel=instruction[12], out=aOrMValue);

    // comp (ALU)
    ALU(x=setDValue, y=aOrMValue, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=compResult, out=outM, zr=zr, ng=ng);

    // writeM
    Or(a=instruction[3], b=false, out=destIsMemory);
    And(a=destIsMemory, b=isCCommand, out=writeM);

    // jump
    And(a=ng, b=instruction[2], out=jump1);
    And(a=zr, b=instruction[1], out=jump2);
    Not(in=ng, out=posOrZero);
    Not(in=zr, out=notZero);
    And(a=posOrZero, b=notZero, out=pos);
    And(a=pos, b=instruction[0], out=jump3);
    Or(a=jump1, b=jump2, out=jump12);
    Or(a=jump12, b=jump3, out=jump123);
    And(a=jump123, b=isCCommand, out=needJump);

    // program counter
    PC(in=setAValue, load=needJump, reset=reset, inc=true, out[0..14]=pc, out=debugPC);
}
